from datetime import datetime, timedelta
from genericpath import exists
from select import select
from urllib import request
from xmlrpc.client import Boolean, boolean
from sqlalchemy import create_engine
import pypyodbc as odbc 
import pyodbc
import pandas as pd
from flask import Flask,jsonify,redirect,request
from flask_restful import Api,Resource
from hashlib import sha256
import json
import os
import jwt
from dotenv import load_dotenv
load_dotenv()
app=Flask(__name__)
api=Api(app)
SERVER='DESKTOP-IEVPBEO'
DATABASE='employeedb'
DRIVER='SQL Server Native Client 11.0'
USERNAME='chidubem'
PASSWORD='ogbuefi'
connect = pyodbc.connect('Driver={SQL Server};'
            'Server=DESKTOP-IEVPBEO;'
            'Database=employeedb;'
            'Trusted_Connection=yes;')
connection_string=f'mssql://{USERNAME}:{PASSWORD}@{SERVER}/{DATABASE}?driver={DRIVER}'
cursor = connect.cursor()
@app.route('/tokenauthent', methods = ['POST'])
def tokenauthent():
        key=("ogb")
        encodedtoken = jwt.encode({
         'user': "email",
        'expiration': str(datetime.utcnow() + timedelta(seconds=60))
        },key)
        cursor.execute("update [employeedb].[dbo].[Token] set token=? where id =1",str(encodedtoken))
        connect.commit()
        if 'tokenauth' in request.headers:
                token = request.headers['tokenauth']
                tokget=cursor.execute("select token from [employeedb].[dbo].[Token] where id=1")
                for ai in tokget:
                    pass
                if(bool(ai[0])==True):
                    decodedtoken=jwt.decode(ai[0], key=key, algorithms=['HS256', ])
                    if(decodedtoken['expiration']<str(datetime.utcnow())):
                        return{"message":"your token has expired"}
                    else:
                        return {"token":ai[0],"message":"token is valid"}
        else:
            return{"message":"token not included"}
app.route('/tokenauthent',method='POST')
        # return "token not working"
class roles(Resource):
    def get(self):
        # to return available roles
        x=cursor.execute("Select roles FROM [employeedb].[dbo].[Roles] ")
        db=pd.read_sql("Select roles FROM [employeedb].[dbo].[Roles] ",connection_string)
        ogb=db.to_dict('records')
        roles=[]
        i=1
        for row in x:
           roles.append({"role" :row[0]})
           i=i+1
        return jsonify(roles)

    def post(self):
        data=request.get_json()
        try:
            cursor.execute("INSERT INTO [employeedb].[dbo].[Roles] (Roles, DesignationID,Description_) VALUES (?, ?,?)",(data['Role'],data['DesignationID'],data['Description']))
            connect.commit()
            return{"message":"role added succesfully"}
        except:
            return {"message":"failed to add role"}

api.add_resource(roles,"/roles")
class designtion(Resource):
    def get(self):
        # to return available roles
        x=cursor.execute("Select [Designation],[Description_] FROM [employeedb].[dbo].[Designation] ")
        roles=[]
        i=1
        for row in x:
           roles.append({"Description":row[1],"Designation":row[0]})
           i=i+1
        return jsonify(roles)

    def post(self):
        data=request.get_json()
        try:
            cursor.execute("INSERT INTO [employeedb].[dbo].[Designation] (Designation,Description_) VALUES (?, ?)",(data['Designation'],data['Description']))
            connect.commit()
            return{"message":"desingtion added succesfully"}
        except:
            return {"message":"failed to add desination"}
api.add_resource(designtion,"/designation")
class ogb(Resource):
    def post(self):
        if 'tokenauth' in request.headers:
                token = request.headers['tokenauth']
            
        name=os.getenv('name')
        return str(name)
        # return "token not working"
api.add_resource(ogb,"/ogb")
if __name__ =="__main__":
    app.run(debug=True)