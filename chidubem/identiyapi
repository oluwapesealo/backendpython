from urllib import request
from xmlrpc.client import Boolean, boolean
from sqlalchemy import create_engine
import pypyodbc as odbc 
import pyodbc
import pandas as pd
from flask import Flask,jsonify,redirect,request
from flask_restful import Api,Resource
from hashlib import sha256
import json
app=Flask(__name__)
api=Api(app)
SERVER='DESKTOP-IEVPBEO'
DATABASE='employeedb'
DRIVER='SQL Server Native Client 11.0'
USERNAME='chidubem'
PASSWORD='ogbuefi'
connect = pyodbc.connect('Driver={SQL Server};'
            'Server=DESKTOP-IEVPBEO;'
            'Database=employeedb;'
            'Trusted_Connection=yes;')
connection_string=f'mssql://{USERNAME}:{PASSWORD}@{SERVER}/{DATABASE}?driver={DRIVER}'
cursor = connect.cursor()
class roles(Resource):
    def get(self):
        # to return available roles
        x=cursor.execute("Select roles FROM [employeedb].[dbo].[Roles] ")
        db=pd.read_sql("Select roles FROM [employeedb].[dbo].[Roles] ",connection_string)
        ogb=db.to_dict('records')
        roles=[]
        i=1
        for row in x:
           roles.append({"role"+str(i) :row[0]})
           i=i+1
        return jsonify(roles)

    def post(self):
        data=request.get_json()
        try:
            cursor.execute("INSERT INTO [employeedb].[dbo].[Roles] (Roles, DesignationID,Description_) VALUES (?, ?,?)",(data['Role'],data['DesignationID'],data['Description']))
            connect.commit()
            return("role added succesfully")
        except:
            return ("failed to add role")

api.add_resource(roles,"/roles")
class designtion(Resource):
    def get(self):
        # to return available roles
        x=cursor.execute("Select Designation FROM [employeedb].[dbo].[Designation] ")
        roles=[]
        i=1
        for row in x:
           roles.append({"Designation"+str(i) :row[0]})
           i=i+1
        return jsonify(roles)

    def post(self):
        data=request.get_json()
        try:
            cursor.execute("INSERT INTO [employeedb].[dbo].[Designation] (Designation,Description_) VALUES (?, ?)",(data['Designation'],data['Description']))
            connect.commit()
            return("desingtion added succesfully")
        except:
            return ("failed to add desination")
api.add_resource(designtion,"/designation")
if __name__ =="__main__":
    app.run(debug=True)